"use strict";

const BOX_SIZE = 3;
const SIZE = BOX_SIZE * BOX_SIZE;

class Sudoku {
  static getBoardFromHtml() {
    let cells = [];
    const rootInput = document.querySelector("#sudokuInput");
    const inputs = rootInput.querySelectorAll("input[type=text]");
    inputs.forEach(input => {
      const x = input.getAttribute("data-x");
      if (cells[x] === undefined) cells[x] = [];
      const y = input.getAttribute("data-y");
      const value = input.value;
      let cell = new Cell(value === "" ? 0 : parseInt(value));
      cells[x][y] = cell;
    });
    return cells;
  }

  static resolve() {
    const cells = Sudoku.getBoardFromHtml();
    this.sudokuSolver = new SudokuSolver(cells);
    const [isResolved, resolvedCells] = this.sudokuSolver.process();
  }
}

class SudokuSolver {
  /** Cell[x][y] */
  constructor(board) {
    this.board = board;
  }

  ac3() {}

  lcv() {}

  mrv() {}

  lineConstraints(row) {
    let constraints = new Set();

    for (let col = 0; col < SIZE; col++) {
      let cell = this.board[col][row];

      if (cell.value !== undefined) {
        constraints.add(cell.value);
      }
    }

    return constraints;
  }

  columnConstraints(col) {
    let constraints = new Set();

    for (let row = 0; row < SIZE; row++) {
      let cell = this.board[col][row];

      if (cell.value !== undefined) {
        constraints.add(cell.value);
      }
    }

    return constraints;
  }

  boxConstraints(col, row) {
    let constraints = new Set();
    let cornerX = col - (col % BOX_SIZE);
    let cornerY = row - (row % BOX_SIZE);

    for (let _col = cornerX; _col < cornerX + BOX_SIZE; _col++) {
      for (let _row = cornerY; _row < cornerY + BOX_SIZE; _row++) {
        let cell = this.board[col][row];

        if (cell.value !== undefined) {
          constraints.add(cell.value);
        }
      }
    }

    return constraints;
  }

  process() {
    const cells = [];
    const isResolved = true; // Algorithme de resolution

    return [isResolved, cells];
  }
}

class Cell {
  ///position: [number, number];
  // if undefined, no value (yet)
  constructor(value) {
    this.value = value;
  }

  removePossibleValue(value) {
    if (this.possibilies.has(value)) {
      this.possibilies.delete(value);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
